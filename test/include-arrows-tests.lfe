(defmodule include-arrows-tests
  (behaviour ltest-unit))

(include-lib "ltest/include/ltest-macros.lfe")
(include-lib "pynchon/include/arrows.lfe")

(deftest diamond
  (is-equal (-<> (car (list 1))) 1)
  (is-equal (-<> 0
                 (* <> 5)
                 (list 1 2 <> 3 4))
            '(1 2 0 3 4))
  (is-equal (-<> (list 1 2 3)
                 (list (list -1 0) <> (list 4 5)
                       (-<> 10
                            (list 7 8 9 <> 11 12)
                            (cons 6 <>)))
                 (lists:append))
            (lists:seq -1 12))
  (is-equal (-<> 10 (list 1 2 3 <> 4 5))
            '(1 2 3 10 4 5))
  (assert (is_list (-<> 10 (list 1 2 3 <> 4 5))))
  (is-equal (-<> 0 (list <>))
            '(0))
  (is-equal (-<> (+ 2 (* 2 3))
                 (list 6 7 <> 9 10)
                 (list <>))
            '((6 7 8 9 10)))
  (is-equal (-<> 10 (list 1 2 'a <> 4 5))
            (list 1 2 'a 10 4 5))
  (is-equal (-<> 0 (list 1 2 3))
            '(0 1 2 3))
  (is-equal (-<>> 0 (list 1 2 3))
            '(1 2 3 0))
  (is-equal (-<> 0 (list 1 2 3))
            '(0 1 2 3))
  (is-equal (-<>> 0 (list 1 2 3))
            '(1 2 3 0))
  ;; TODO: map
  ;; TODO: atom/fun
  ;; (is-error 'unbound-func (eval '(-<> 0 (list <> <>))))
  (is-equal (-<> 0 (list 1 2 3))
            '(0 1 2 3))
  (is-equal (-<>> 0 (list 1 2 3))
            '(1 2 3 0))
  (is-equal (-<> 0 (list 1 2 3))
            '(0 1 2 3))
  (is-equal (-<>> 0 (list 1 2 3))
            '(1 2 3 0))
  (is-equal (-<>> 4 (list) (++ '(1 2 3)))
            '(1 2 3 4))
  (is-equal (-<> 4 (cons '(1 2 3)))
            '(4 1 2 3))
  (is-equal (-<>> 4
                  (list)
                  (++ '(1 2 3))
                  (lists:reverse)
                  (lists:map (lambda (x) (+ x 1)) <>))
            '(5 4 3 2))
  (is-equal (-<> 4
                 (cons '(1 2 3))
                 (lists:reverse)
                 (lists:map (lambda (x) (+ x 1)) <>))
            '(4 3 2 5)))

(deftest back-arrow
  (is-equal (<<-
             (let ((x 'nonsense)))
             (if (not (is_atom x)) 'foo)
             (let ((more 'blah)) more))
            (->>
             (let ((more 'blah)) more)
             (if (not (is_atom x)) 'foo)
             (let ((x 'nonsense)))))
  (is-equal (<<-
             (let ((x 'nonsense)))
             (if (not (is_atom x)) 'foo)
             (let ((more 'blah)) more))
            (let ((x 'nonsense))
              (if (not (is_atom x))
                'foo
                (let ((more 'blah))
                  more))))
  (is-equal (<<-
             (let ((x 'nonsense)))
             (if (not (is_atom x)) 'foo)
             (let ((more 'blah)) more))
            'blah))

(deftest furculi
  (is-equal (-< (+ 1 2)
                (list 2)
                (list 3)
                (list 4))
            '#((3 2) (3 3) (3 4)))
  (is-equal (-< (+ 1 2)
                (->> (tuple) (lists:duplicate 3))
                (-> (* 2) (list))
                (list 4))
            '#((#(3) #(3) #(3)) (6) (3 4)))
  (is-equal (-<< (+ 1 2)
                 (list 2 1)
                 (list 5 7)
                 (list 9 4))
            '#((2 1 3) (5 7 3) (9 4 3)))
  (is-equal (-<>< (+ 1 2)
                  (list <> 2 1)
                  (list 5 <> 7)
                  (list 9 4 <>))
            '#((3 2 1) (5 3 7) (9 4 3)))
  (is-equal (-<>>< (+ 1 2)
                   (list <> 2 1)
                   (list 5 <> 7)
                   (list 9 4 <>)
                   (list 10 11))
            '#((3 2 1) (5 3 7) (9 4 3) (10 11 3))))

;; (deftest applicative
;;   (is-equal (apply->> '((1 2) (3 4)) (#'lists:append/2) (#'+/4))
;;             10)
;;   (is-equal (apply->> '((1 2) (3 4)) (#'lists:append/2))
;;             '(1 2 3 4))
;;   ;; TODO: think on these
;;   ;; (is (= (apply->> [[1 2] [3 4]] (concat [5 6]))
;;   ;;        [1 2 3 4]))
;;   ;; (is (= (apply->> [[1 2] [3 4]] (concat [5 6]) (+))
;;   ;;        21))
;;   ;; (is (= (apply-> [[1 2] [3 4]] concat +)
;;   ;;        10))
;;   ;; (is (= (apply-> [1 2 3 4] (concat [[5 6]]))
;;   ;;        [1 2 3 4 5 6]))
;;   ;; (is (= (apply-> [1 2 3 4] (concat [[5 6]]) (+))
;;   ;;        21))
;;   )
